/*---------------------------------------------------------------
  :: sails-brm
  -> adapter
---------------------------------------------------------------*/

var Errors = require('waterline-errors').adapter,
  async = require('async'),
  restify = require('restify'),
  url = require('url'),
  _ = require('lodash');
  
  var start_time = null;
  var end_time = null;

module.exports = (function() {
  "use strict";

  var connections = {};

  // Private functions
  /**
   * Format result object according to schema
   * @param result result object
   * @param collectionName name of collection the result object belongs to
   * @param config object representing the connection configuration
   * @param definition object representing the collection definition
   * @returns {*}
   */
  function formatResult(result, collectionName, config, definition) {
    if (_.isFunction(config.beforeFormatResult)) {
      result = config.beforeFormatResult(result);
    }

    _.each(definition, function(def, key) {
      if (def.type.match(/date/i)) {
        result[key] = new Date(result[key] ? result[key] : null);
      }
    });

    if (_.isFunction(config.afterFormatResult)) {
      result = config.afterFormatResult(result);
    }

    return result;
  }

  /**
   * Format results according to schema
   * @param results array of result objects (model instances)
   * @param collectionName name of collection the result object belongs to
   * @param config object representing the connection configuration
   * @param definition object representing the collection definition
   * @returns {*}
   */
  function formatResults(results, collectionName, config, definition) {
    if (_.isFunction(config.beforeFormatResults)) {
      results = config.beforeFormatResults(results);
    }

    results.forEach(function(result) {
      formatResult(result, collectionName, config, definition);
    });

    if (_.isFunction(config.afterFormatResults)) {
      results = config.afterFormatResults(results);
    }

    return results;
  }

  /**
   * Ensure results are contained in an array. Resolves variants in API responses such as `results` or `objects` instead of `[.....]`
   * @param data response data to format as results array
   * @param collectionName name of collection the result object belongs to
   * @param config object representing the connection configuration
   * @param definition object representing the collection definition
   * @returns {*}
   */
  function getResultsAsCollection(data, collectionName, config, definition) {
    var d = (data.objects || data.results || data),
      a = _.isArray(d) ? d : [d];

    return formatResults(a, collectionName, config, definition);
  }

  /**
   * Makes a REST request via restify
   * @param identity type of connection interface
   * @param collectionName name of collection the result object belongs to
   * @param methodName name of CRUD method being used
   * @param cb callback from method
   * @param options options from method
   * @param values values from method
   * @returns {*}
   */
  function makeRequest(identity, collectionName, restMethod, options, cb, values) {
    var r = null,
      opt = null,
      //cache = connections[identity].cache,
      //config = _.cloneDeep(connections[identity].config),
      connection = connections[identity].connection,
      definition = connections[identity].definition;
      //restMethod = config.methods[methodName],
		//config = _.cloneDeep(sails.models[collectionName].config),
		//connection = sails.models[collectionName].connection;
	var config = _.extend({}, connections[identity].config, sails.models[collectionName].config, sails.models[collectionName].settings);
	/*
    var config = {
          protocol: c.protocol,
          hostname: c.hostname,
          port: c.port,
          path: c.path,
          service: c.service,
          query: c.query,
          resource: c.resource || sails.models[collectionName].identity,
		  useResource: c.useResource,
          methods: _.extend({}, connections[identity].config.methods, c.methods),
		  logFile: connections[identity].config.logFile,
          beforeFormatResult: c.beforeFormatResult,
          afterFormatResult: c.afterFormatResult,
          beforeFormatResults: c.beforeFormatResults,
          afterFormatResults: c.afterFormatResults
        };
	config = _.cloneDeep(sails.models[collectionName].config);
	*/
	
		var pathname = config.path;

		/*
    // Override config settings from options if available
    if (options && _.isPlainObject(options)) {
      _.each(config, function(val, key) {
        if (_.has(options, key)) {
          config[key] = options[key];
        }
      });
    }
	*/
	_.extend(config, options);

    //pathname = config.pathname + '/' + config.resource + (config.action ? '/' + config.action : '');
	if (config.service) {
		pathname = pathname + config.service;
	}
	else {
		cb(new Error('Missing parameter {service}!'));
		return false;
	}
	if (config.method) {
		pathname = pathname + '/' + config.method;
	}
	else {
		cb(new Error('Missing parameter {method}!'));
		return false;
	}
	if (config.resource && config.useResource) {
		pathname = pathname + '/' + config.resource;
	}
	if (options && options.procedure) {
		pathname = pathname + '/' + options.procedure;
	}


	/*
    if (options && options.where) {
      // Add id to pathname if provided
      if (options.where.id) {
        pathname += '/' + options.where.id;
        delete options.where.id;
      } else if (methodName === 'destroy' || methodName == 'update') {
        // Find all and make new request for each.
        makeRequest(identity, collectionName, 'find', function(error, results) {
          if (error) {
            cb(error);
          } else {
            _.each(results, function(result, i) {
              options = {
                where: {
                  id: result.id
                }
              };

              makeRequest(identity, collectionName, methodName, (i + 1) === results.length ? cb : function() {}, options, values);
            });
          }
        }, options);

        return;
      }

      // Add where statement as query parameters if requesting via GET
      if (restMethod === 'get') {
        _.extend(config.query, options.where);
        _.extend(config.query, {
          limit: options.limit,
          offset: options.skip
        });
      }
      // Set opt if additional where statements are available
      else if (_.size(options.where)) {
        opt = options.where;
      } else {
        delete options.where;
      }
    }
	*/

	/*
    if (!opt && values) {
      opt = values;

      if (options) {
        opt = _.extend(options, opt);
      }
    }
	*/

    // Add pathname to connection
    _.extend(config, {
      pathname: pathname
    });

    // Format URI
    var uri = url.format(config);

	/*
    // Retrieve data from the cache
    if (methodName === 'find') {
      r = cache && cache.engine.get(uri);
    }
	*/

	/*
    if (r) {
      cb(null, r);
    } else 
	*/
	if (_.isFunction(connection[restMethod])) {
      var path = uri.replace(connection.url.href, '/');

      var callback = function(err, req, res, obj) {
        if (err && (typeof res === 'undefined' || res === null || res.statusCode !== 404)) {
          cb(err);
        } else if (err && res.statusCode === 404) {
          cb(null, []);
        } else {
			/*
          if (methodName === 'find') {
            r = getResultsAsCollection(obj, collectionName, config, definition);
			*/

			/*
            if (cache) {
              cache.engine.set(uri, r);
            }
			*/
          //} else {
            r = formatResult(obj, collectionName, config, definition);

			/*
            if (cache) {
              cache.engine.del(uri);
            }
			*/
          //}

		end_time = new Date();
		if(end_time-start_time>200) {
		console.log(path+': '+(end_time-start_time));
		}
          cb(null, r);
        }
      };

	var t = new Date();
	start_time = new Date();
	var log_msg = '[' + t.toLocaleString() + ']: ' + sails.util.inspect(path,{depth:3}) + ' ' + sails.util.inspect(options,{depth:4}) + "\n";
	sails.util.fs.appendFile(config.logFile,log_msg,function(err){
		if(err) sails.log.error('Cannot write to webservice log file!'+err);
	});

		// Make request via restify
      if (restMethod == 'post') {
        connection[restMethod](path, options, callback);
      } else {
        connection[restMethod](path, callback);
      }
    } else {
      cb(new Error('Invalid REST method: ' + restMethod));
    }

    return false;
  }

  // Adapter
  var adapter = {

    syncable: false,

    defaults: {
      type: 'json',
      host: 'localhost',
      port: 80,
      protocol: 'http',
      path: '',
      service: '',
      resource: null,
      useResource: false,
      query: {},
      methods: {
      },
	  logFile: 'webservice.log',
      beforeFormatResult: null,
      afterFormatResult: null,
      beforeFormatResults: null,
      afterFormatResults: null
    },

    registerConnection: function(connection, collections, cb) {
      if (!connection.identity) return cb(Errors.IdentityMissing);
      if (connections[connection.identity]) return cb(Errors.IdentityDuplicate);

      var config, clientMethod, instance;

      config = this.defaults ? _.extend({}, this.defaults, connection) : connection;
	  //config = _.extend({}, connection.defaults, connection.config, connection.settings);
      config.methods = this.defaults ? _.extend({}, this.defaults.methods, connection.methods) : connection.methods;
      clientMethod = 'create' + config.type.substr(0, 1).toUpperCase() + config.type.substr(1).toLowerCase() + 'Client';

      if (!_.isFunction(restify[clientMethod])) {
        throw new Error('Invalid type provided');
      }

      instance = {
        config: {
          protocol: config.protocol,
          hostname: config.host,
          port: config.port,
          path: config.path,
          service: config.service,
          query: config.query,
          resource: config.resource || connection.identity,
		  useResource: config.useResource,
          methods: _.extend({}, connection.methods, config.methods),
		  logFile: connection.logFile,
          beforeFormatResult: config.beforeFormatResult,
          afterFormatResult: config.afterFormatResult,
          beforeFormatResults: config.beforeFormatResults,
          afterFormatResults: config.afterFormatResults
        },

        connection: restify[clientMethod]({
          url: url.format({
            protocol: config.protocol,
            hostname: config.host,
            port: config.port
          }),
		  connectTimeout:10000,
		  requestTimeout:10000,
		  retry:false,
		  accept: '*',
		  agent: null,
		  headers: {
			"Content-Type": "multipart/form-data"
		  }
        })
      };

      if (config.basicAuth) {
        instance.connection.basicAuth(config.basicAuth.username, config.basicAuth.password);
      }

	  /*
      if (config.cache) {
        instance.cache = config.cache;
      }
	  */

      connections[connection.identity] = instance;

      cb();
    },

    post: function(connection,collectionName, options, cb){
      makeRequest(connection,collectionName, 'post', options, cb);
      //makeRequest(collectionName, 'post', 'select', options, cb);
    },

    get: function(collectionName, options, cb){
      makeRequest(collectionName, 'get', 'select', options, cb);
    },

    login: function(collectionName, options, cb){
      makeRequest(collectionName, 'post', 'select', 'login', cb, options);
    },

    create: function(connection, collectionName, values, cb) {
      makeRequest(connection, collectionName, 'create', cb, null, values);
    },

    find: function(connection, collectionName, options, cb) {
      makeRequest(connection, collectionName, 'find', cb, options);
    },

    update: function(connection, collectionName, options, values, cb) {
      makeRequest(connection, collectionName, 'update', cb, options, values);
    },

    destroy: function(connection, collectionName, options, cb) {
      makeRequest(connection, collectionName, 'destroy', cb, options);
    },

    drop: function(connection, collectionName, relations, cb) {
      cb();
    },

    define: function(connection, collectionName, definition, cb) {
      connections[connection].definition = definition;
      cb();
    },

    describe: function(connection, collectionName, cb) {
      cb(null, connections[connection].definition);
    }
  };

  return adapter;
}());